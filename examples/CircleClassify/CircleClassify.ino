
#include "Minerva.h"
NeuralNetwork* nn;

const unsigned char networkData[] = {0x03,0x02,0x0A,0xD7,0x23,0x3C,0x10,0x00,0x02,0x00,0x3C,0x38,0x39,0xC0,0x26,0xEB,0x44,0x3D,0x24,0xA1,0x14,0x3F,0x8E,0x9F,0x15,0xC0,0x07,0x11,0x13,0x40,0x48,0x7E,0xCD,0x3E,0xBB,0x39,0xFA,0x3F,0x20,0x14,0x91,0xBE,0x1C,0x0F,0xAA,0xBF,0xB2,0xCF,0x03,0x40,0x15,0x5D,0xEB,0xBF,0xA3,0x30,0x05,0x41,0x1C,0xBA,0xD3,0xBF,0x70,0x96,0x14,0xBF,0x4B,0x70,0x74,0xC0,0x4E,0x37,0x9C,0x3F,0x5A,0x4D,0x7A,0xC0,0xE1,0xD7,0x92,0x3F,0x2B,0xC8,0xB3,0x3F,0x95,0x4C,0x2C,0xBE,0x1D,0x49,0x0C,0xC0,0x0F,0xBC,0x23,0xBF,0xB6,0xB5,0x27,0xC0,0x8B,0x23,0xE6,0xBD,0xD2,0xA4,0x03,0x3F,0xB3,0x7E,0x08,0xC0,0x21,0xBE,0x30,0xBF,0x6F,0xC8,0x29,0xC0,0x55,0x51,0xBD,0xBF,0x44,0x22,0x33,0xC0,0x88,0x35,0x35,0x3F,0x20,0x2D,0x24,0x40,0x41,0xFA,0x9E,0x3F,0xA1,0x39,0x72,0x3F,0xE7,0xC0,0x69,0xBF,0x80,0x51,0xB6,0xBE,0x83,0x57,0x13,0xBF,0xAE,0x2C,0x94,0xBF,0xD3,0x9C,0x30,0x3F,0x9D,0x16,0x04,0x3F,0xB7,0xAC,0xE7,0x3E,0x16,0xC5,0x2B,0x3E,0x7A,0xFD,0x8A,0x3F,0x4B,0xCE,0x88,0x3F,0xBF,0x29,0x7B,0x3F,0x4D,0x35,0xBF,0x3F,0x4B,0x91,0x24,0x40,0xBE,0x99,0x49,0xBF,0x02,0x0A,0xD7,0x23,0x3C,0x04,0x00,0x10,0x00,0x19,0xAF,0x1E,0x40,0x5A,0xE0,0xA9,0xBE,0x92,0x03,0xF9,0xBF,0x9F,0x93,0x93,0xBF,0x54,0xED,0xAC,0x3F,0xCA,0xEF,0xB2,0xC0,0xDA,0x43,0x13,0x3F,0x9F,0x05,0x52,0x40,0xC4,0x0D,0x65,0x40,0x57,0xF0,0x09,0xBF,0x3A,0xB5,0x98,0x3E,0x9A,0x58,0xB8,0x3F,0x77,0x79,0x82,0xBF,0x50,0x14,0xCA,0x3F,0x6C,0x13,0x81,0xBE,0xEC,0xD0,0xD0,0xBF,0x52,0x28,0x90,0xBD,0x60,0xCC,0x0A,0xBF,0xB5,0xDD,0x7B,0x3E,0x8D,0x5C,0xBC,0xBE,0xE7,0xA9,0x8A,0xBE,0xC8,0x0B,0xAE,0xBF,0xBF,0xDE,0x76,0x3C,0x79,0x31,0x1C,0x3F,0xE7,0xF5,0x27,0xBF,0xB3,0x3C,0x11,0x3F,0x3D,0xFB,0x46,0xBF,0xBC,0x55,0x4B,0xBF,0xE7,0xF6,0xDC,0x3E,0x5B,0x2E,0x1C,0x3F,0xD7,0x1D,0x4E,0xBF,0x95,0xA3,0x39,0xBF,0x4B,0x98,0x1B,0xC0,0x66,0x41,0x2C,0x3F,0xCB,0xC4,0x1B,0x40,0xB0,0xBC,0x20,0x40,0x15,0x5A,0xCD,0xBD,0x98,0x98,0x67,0xC0,0x64,0x8E,0x87,0xBF,0x4D,0x41,0x2E,0xC0,0x64,0x93,0x14,0xC0,0x56,0xF2,0xD4,0x3F,0xAC,0xBA,0xD6,0xBF,0x9E,0x73,0x0E,0xC0,0x86,0x7D,0x05,0x3E,0x2A,0x0D,0xE1,0xBD,0xEA,0x6F,0x15,0xC0,0x44,0xFB,0x5B,0xBC,0x29,0xEC,0x8C,0xBE,0x6E,0xFA,0x2C,0xC0,0x9C,0x78,0x9B,0x3F,0x9F,0xDA,0x29,0xBE,0x90,0xD7,0x0C,0x40,0x49,0x53,0x26,0x3F,0xC3,0x96,0x56,0xBF,0xE7,0x10,0x69,0x3F,0xE7,0x43,0x11,0x3F,0x95,0x75,0x32,0x3E,0x7E,0x12,0x9F,0xBF,0xF7,0x33,0xE8,0xBE,0xC4,0x21,0xED,0xBF,0x35,0x8A,0x49,0xC0,0x7A,0x19,0x53,0xC0,0xD4,0x4E,0x07,0x40,0x2F,0x38,0x38,0x3F,0x72,0x47,0xD2,0x3E,0x1B,0x8C,0xD2,0x3F,0xD5,0xF5,0xE0,0x3E,0x02,0x0A,0xD7,0x23,0x3C,0x01,0x00,0x04,0x00,0xE1,0xB5,0x00,0x41,0x42,0x24,0x76,0x3F,0xD1,0xF7,0xE5,0x40,0xBC,0x75,0xB3,0x40,0x14,0xFD,0x65,0xC0,};
/*

With this example arduino will create a neural network with 3 layers
which has 16, 4 and 1 neurons
We will give inputs between 0 and 1
it will classify if inputs are in circle or not. 
Circle has 0.25 radius.
Network data is pulled from file which i exported with lightnetwork windows core.


*/
void setup() {
  Serial.begin(9600);
  nn = Minerva::importFromMemory((char*)networkData);

  float arr[] = {0.1,0.1};
  MNC::Matrix in = MNC::Matrix::fromArray(2,1,arr);
  MNC::Matrix a = nn->guess(in);
 
  Serial.println(a.at(0,0),8);

  
}

void loop() {
  // put your main code here, to run repeatedly:

}